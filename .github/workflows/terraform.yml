name: OPSWAT IaC Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: '1.5.0'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deployment:
          - 'deployments/aws/basic-demo'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      working-directory: ${{ matrix.deployment }}
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ${{ matrix.deployment }}
      run: terraform init -backend=false

    - name: Terraform Validate
      working-directory: ${{ matrix.deployment }}
      run: terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        quiet: true
        soft_fail: true

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check README exists
      run: |
        if [ ! -f README.md ]; then
          echo "README.md is missing"
          exit 1
        fi

    - name: Check deployment documentation
      run: |
        if [ ! -f docs/aws-deployment.md ]; then
          echo "AWS deployment documentation is missing"
          exit 1
        fi

    - name: Markdown Lint
      uses: articulate/actions-markdownlint@v1
      with:
        config: .markdownlint.json
        files: '**/*.md'
        ignore: 'node_modules'

  plan-aws:
    name: Plan AWS Deployment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Create terraform.tfvars
      working-directory: deployments/aws/basic-demo
      run: |
        cat > terraform.tfvars << EOF
        aws_region = "us-west-2"
        environment = "ci-test"
        vpc_cidr = "10.0.0.0/16"
        availability_zones = 2
        allowed_cidr_blocks = ["10.0.0.0/8"]
        public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
        instance_type = "t3.micro"
        desired_capacity = 1
        metadefender_license_key = "${{ secrets.METADEFENDER_LICENSE_KEY }}"
        EOF

    - name: Terraform Init
      working-directory: deployments/aws/basic-demo
      run: terraform init

    - name: Terraform Plan
      working-directory: deployments/aws/basic-demo
      run: terraform plan -no-color
      id: plan

    - name: Comment Plan on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Plan ðŸ“–
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost cost estimate
      run: |
        infracost breakdown --path=deployments/aws/basic-demo \
                           --format=json \
                           --out-file=/tmp/infracost.json

    - name: Post Infracost comment
      run: |
        infracost comment github --path=/tmp/infracost.json \
                                --repo=$GITHUB_REPOSITORY \
                                --github-token=${{ github.token }} \
                                --pull-request=${{ github.event.pull_request.number }} \
                                --behavior=update